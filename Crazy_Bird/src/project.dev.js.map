{"version":3,"sources":["assets/bg/bg_move.js","assets/bird/bird0_controlor.js","assets/bird/bird1_controlor.js","assets/bird/bird2_controlor.js","assets/bird/bird4_controlor.js","assets/pipe/boom.js","assets/UI/des.js","assets/UI/gamestart.js","assets/UI/grades.js","assets/UI/life.js","assets/pipe/pipe_sound.js","assets/pipe/skill_one.js","assets/bird/swpam_bird.js"],"names":["cc","Class","extends","Component","properties","speed","onLoad","update","dt","this","node","x","director","getPhysicsManager","enabled","getCollisionManager","y","randomMinus1To1","onCollisionEnter","other","self","tag","anim","getComponent","Animation","play","setTimeout","destroy","bind","default","type","i","random0To1","log","animState","AnimationState","boom","Node","active_boom","active","inactive_boom","buttonclick","playing","isPlaying","onclick","loadScene","labe","Label","grades","parseInt","string","toString","lifes","target","Prefab","flag","scene","getScene","instantiate","parent","setPosition","audioSource","AudioSource","oncliki","brid","time","number","j","Math","random","floor"],"mappings":"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","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        speed :100,\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n     \r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n     \r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n     update: function (dt) {\r\n        this.node.x-=this.speed*dt;\r\n        if(this.node.x<=-959)\r\n        {\r\n            this.node.x=960;\r\n        }\r\n     },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n       speed:100,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        cc.director.getCollisionManager().enabled = true;\r\n       \r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        var y=cc.randomMinus1To1()*460;\r\n        this.node.y-=y*dt;\r\n        this.node.x+=this.speed*dt;\r\n    \r\n\r\n     },\r\n     onCollisionEnter: function (other, self) {\r\n           if(other.tag==2){\r\n               var anim = this.getComponent(cc.Animation);\r\n                anim.play('bired0_glode');\r\n               setTimeout(function () {\r\n                    this.node.destroy();\r\n                    }.bind(this), 500);\r\n           }\r\n     },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        speed:200,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        cc.director.getCollisionManager().enabled = true;\r\n        \r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        var y=cc.randomMinus1To1()*460;\r\n        this.node.y-=y*dt;\r\n        this.node.x+=this.speed*dt;\r\n        if(this.node.y>=100||this.node.y<=-100)\r\n        {\r\n            this.speed=350;\r\n        }\r\n        else\r\n        {\r\n            this.speed=100;\r\n        }\r\n     },\r\n     onCollisionEnter: function (other, self) {\r\n            if(other.tag==2){\r\n                var anim = this.getComponent(cc.Animation);\r\n                anim.play('bired1_glode');\r\n               setTimeout(function () {\r\n          this.node.destroy();\r\n        }.bind(this), 500);\r\n            }\r\n     },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n         anim: {\r\n              default:[],\r\n            type:[cc.Animation]\r\n        },\r\n      \r\n        \r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        cc.director.getCollisionManager().enabled = true;\r\n         this.anim = this.getComponent(cc.Animation);\r\n        var i=cc.random0To1()*10;\r\n        if(i>=0&&i<=3)\r\n        {\r\n             this.anim.play('1');    \r\n             cc.log(1);\r\n        }\r\n\r\n        else if(i>=3&&i<=6)\r\n        {\r\n            this.anim.play('2');   \r\n              cc.log(2);\r\n        }\r\n         else\r\n         {\r\n            this.anim.play('3');\r\n              cc.log(3);\r\n         }\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n       \r\n       \r\n     },\r\n     onCollisionEnter: function (other, self) {\r\n             if(other.tag==2){\r\n                var anim = this.getComponent(cc.Animation);\r\n                anim.play('bired2_glode');\r\n               setTimeout(function () {\r\n                    this.node.destroy();\r\n                    }.bind(this), 500);\r\n             }\r\n     },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        cc.director.getCollisionManager().enabled = true;\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    onCollisionEnter: function (other, self) {\r\n             if(other.tag==2){\r\n                var anim = this.getComponent(cc.Animation);\r\n                anim.play('bired4_glode');\r\n               setTimeout(function () {\r\n                    this.node.destroy();\r\n                    }.bind(this), 500);\r\n             }\r\n     },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n         \r\n        anim: {\r\n            default: null,\r\n            type: cc.Animation,\r\n        },\r\n        animState:\r\n        {\r\n            default: null,\r\n            type: cc.AnimationState,\r\n        },\r\n        boom:\r\n        {\r\n          default:null,\r\n          type:cc.Node,\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.anim = this.getComponent(cc.Animation);\r\n        this.animState = this.anim.play('close_open');\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n     //},\r\n    active_boom:function(){\r\n      this.boom.active=true;  \r\n    },\r\n    inactive_boom:function(){\r\n      this.boom.active=false;  \r\n    },\r\n     \r\n     buttonclick:function(){\r\n         var playing = this.animState.isPlaying;\r\n         if(!playing)\r\n         {\r\n            this.anim.play();\r\n         }\r\n     },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    buttonclick:function(){\r\n        setTimeout(function () {\r\n          this.node.destroy();\r\n        }.bind(this), 500);\r\n    }\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        \r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    onclick:function(){\r\n         cc.director.loadScene(\"gaming\");\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n           labe: {\r\n            default: null,\r\n            type: cc.Label,\r\n        },\r\n        grades:0.0,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    onCollisionEnter: function (other, self) {\r\n            \r\n            if(other.tag==0)\r\n            {\r\n            this.grades=parseInt(this.labe.string);\r\n            cc.log(\"grades\"+this.grades);\r\n            this.grades+=1;\r\n            this.labe.string=this.grades.toString();\r\n            }\r\n      \r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n         labe: {\r\n            default: null,\r\n            type: cc.Label,\r\n        },\r\n        lifes:10.0,\r\n         target: {\r\n             default: null,\r\n            type: cc.Prefab,\r\n             },\r\n            \r\n        flag:true,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n     \r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        if(this.lifes<=0)\r\n        {\r\n                \r\n                    if(this.flag)\r\n                    {\r\n                        var scene = cc.director.getScene();\r\n                        var node = cc.instantiate(this.target);\r\n\r\n                         node.parent = scene;\r\n                        node.setPosition(0, 0);\r\n                    var anim=node.getComponent(cc.Animation);\r\n                        anim.play(\"gamend\"); \r\n                        this.flag=false;\r\n                    }\r\n            setTimeout(function () {\r\n                    cc.director.loadScene(\"gamstart\");\r\n                    }.bind(this), 2500);\r\n            \r\n        }\r\n    },\r\n    onCollisionEnter: function (other, self) {\r\n            if(other.tag===0)\r\n            {\r\n                this.lifes=parseInt(this.labe.string);\r\n                this.lifes-=1;\r\n                this.labe.string=this.lifes.toString();\r\n                other.node.destroy();\r\n            }\r\n            \r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        audioSource: {\r\n         type: cc.AudioSource,\r\n         default: null\r\n     },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    onCollisionEnter: function (other, self) {\r\n        if(other.tag==0)\r\n        {\r\n              this.audioSource.play();\r\n        }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n       \r\n         anim: {\r\n            default: null,\r\n            type: cc.Animation,\r\n        },\r\n        animState:\r\n        {\r\n            default: null,\r\n            type: cc.AnimationState,\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.anim = this.getComponent(cc.Animation);\r\n        this.animState = this.anim.play('skill_one');\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    oncliki:function()\r\n    {\r\n         cc.log(1);\r\n         var playing = this.animState.isPlaying;\r\n         if(!playing)\r\n         {\r\n            this.anim.play('skill_one');\r\n         }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n            brid: {\r\n            default: [],\r\n            type: [ cc.Prefab] ,\r\n         },\r\n            time:0.0,\r\n            number:4.0,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n            this.time+=dt;\r\n           \r\n            if(this.time>=1.5)\r\n            {\r\n                this.time=cc.random0To1();\r\n                var scene = cc.director.getScene();\r\n                var j=Math.random()*this.number;\r\n                j=Math.floor(j)\r\n                cc.log(\"j: \",j);\r\n                var node=cc.instantiate(this.brid[j]);\r\n                var y=cc.randomMinus1To1()*50+320;\r\n                node.parent = scene;\r\n                 var x=cc.randomMinus1To1()*50;\r\n                node.setPosition(x, y); \r\n                \r\n            }\r\n    },\r\n});\r\n"],"sourceRoot":"/source/","file":"project.dev.js"}